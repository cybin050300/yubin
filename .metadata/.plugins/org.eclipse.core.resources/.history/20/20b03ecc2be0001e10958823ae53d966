package com.cyb.db;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * 데이터 베이스 접속, 각종 쿼리 실행 dao class( data access object)
 */
public class DataBaseClass {
	public final String DB_DRIVER = "com.mysql.cj.jdbc.Driver";
	public final String DB_URL = "jdbc:mysql://localhost:3306/";
	public final String DB_ADMIN_ID = "root";
	public final String DB_ADMIN_PW = "1234";

	// java.sql.~~~

	public Connection conn = null; // 공유변수를 만들려면 static 붙여주면 됨

	public DataBaseClass() { // 기본 생성자 //private이면 DataBaseClass 생성 자체가 안됨 -> 나중에 private로 싱글톤 패턴으로 바꿀것임

	}

	/** 1. 데이터 베이스 접속 메서드 **/
	public void connMySQL() {
		// 드라이버 로드
		try {
			Class.forName(DB_DRIVER);
			conn = DriverManager.getConnection(DB_URL + "test", DB_ADMIN_ID, DB_ADMIN_PW);
			System.out.println("드라이버 접속 성공!!");
		} catch (ClassNotFoundException e) {
			System.out.println("ClassNotFound ERR" + e.getMessage());
		} catch (SQLException e) {
			System.out.println("DriverManager.getConnection ERR" + e.getMessage());
		}

		// Connection 객체 얻기

	}

	/** 2. 데이터베이스 내의 테이블 전체 레코드 조회 **/
	// select * from employee
	// Connection, Statement, Resultset // new로 Statement 생성 불가 -> Connection사용
	// 전체조회시 Statement 사용
	// 1개 조회시 쿼리문에 변수 들어가야함
	public void selectAll() {

		Statement stmt = null;
		ResultSet rs = null;

		try {
			stmt = conn.createStatement(); // Statement 객체 생성
			rs = stmt.executeQuery("select * from employee"); // 전체 조회후, 결과 값 저장

			while (rs.next()) { // 읽어들일 레코드가 존재하면 true
				System.out.print(rs.getString("empname")); // 조회된 필드 중 emp_name 필드 값만 확인
				System.out.println(rs.getInt("sale")); // 조회된 필드 중 sale 필드 값만 확인

			}

		} catch (SQLException e) {
			System.out.println("SELECT ALL ERR: " + e.getMessage());
		} finally {
			try {
				rs.close();
				stmt.close();
			} catch (SQLException e) {
				System.out.println("SELECT ALL CLOSE ERR: " + e.getMessage());
			}
		}

	} // selectAll() END

	/** 3. 데이터베이스 내의 테이블에서 empNo(사원 고유번호)로 조회 **/
	// "select * from employee where empno =?"
	// ? => String no="1457"
	// "select * from employee where empno =" + no => 실행 안됨
	// "select * from employee where empno =" + "1234"
	// select * from employee where empno = 1457"로 인식한다 -> 1457을 숫자로 인식함(문자열이기 때문에
	// 오류)
	// "select * from employee where empno ='1457'" 로 써줘야 함
	// Connection, PreparedStatement, ResultSet
	// PreparedStatement는 Connection를 통해 객체를 반환 받는다
	// 단, 미리 쿼리를 넣어 주어야 한다!!!

	public void selectOne() {
		PreparedStatement pstmt = null; // 필드에 들어가는 값을 변수처리할때 ? 처리 해줌(테이블 x)
		ResultSet rs = null;

		String query = "select * from employee where empno =? ";// "select * from employee where empno =?, empname=? "
		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, 1001); // ? 처리 해줌
			// pstmt.setString(2,김사랑) // 2번째 ? 처리해줌

			rs = pstmt.executeQuery();
			while (rs.next()) {
				System.out.println(rs.getString("empname") + ":" + rs.getInt("sale"));
			}
		} catch (SQLException e) {
			System.out.println("SELECT ON ERR : " + e.getMessage());
		} finally {
			try {
				rs.close();
				pstmt.close();
			} catch (SQLException e) {
				System.out.println("SELECT ON CLOSE ERR : " + e.getMessage());
			}

		}

	}

	// 전체 레코드 중 일부분만 조회
	// select * from employee limit 시작index, 끝 index, count <== MySQL 전용 (Oracle X )
	// select * from employee limit ?, ?
	public void selectLimit() {
		PreparedStatement pstmt = null;
		ResultSet rs = null;

		String query = "select * from employee limit ?, ?";
		int startIndex = 5; // 값을 입력받고 싶으면 int 매개변수 선언 해주면 됨 -> 스캐너 필요(값 읽어옴)
							// nextInt로 받아서 메인에서 호출
		int count = 3;

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, startIndex);
			pstmt.setInt(2, count);

			rs = pstmt.executeQuery();

			while (rs.next()) {
				System.out.println(
						rs.getString("empname") + " 급여 : " + rs.getInt("sale") + ", 입사일 : " + rs.getString("hireDate"));
			}
		} catch (SQLException e) {
			System.out.println("SELECT LIMIT ERR : " + e.getMessage());
		} finally {
			try {
				rs.close();
				pstmt.close();

			} catch (SQLException e) {
				System.out.println("SELECT LIMIT CLOSE ERR : " + e.getMessage());
			}
		}
	}

	/** 레코드 추가 **/
	/*
	 * insert into employee X X X X (empNo, empName, job, mgr, hireDate, sale,
	 * commission, deptNo) values (1001, '김사랑', '사원', '13', '2007-03-01', 300, 0,
	 * 20);
	 */
	/*
	 * 추가할 코드 insert into employee (empNo, empName, hireDate, sale) values (1015,
	 * '최유빈', '2024-03-12', 500); insert into employee (empNo, empName, hireDate,
	 * sale) values (?, ?, ?, ?); Connection, PreparedStatement, int result
	 */
	public void insert() {
		PreparedStatement pstmt = null;
		String query = "insert into employee (empNo, empName, hireDate, sale) values (?, ?, ?, ?)";
		int result = 0;
		int empno = 1015;
		String empname = "최유빈";
		String hiredate = "2024-03-12";
		int sale = 400;

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, empno);
			pstmt.setString(2, empname);
			pstmt.setString(3, hiredate);
			pstmt.setInt(4, sale);

			result = pstmt.executeUpdate();
			if (result < 1) {
				System.out.println("INSERT ERR");
			}

		} catch (SQLException e) {
			System.out.println("INSERT CLOSE ERR :" + e.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (SQLException e) {
				System.out.println("INSERT CLOSE ERR :" + e.getMessage());
			}
		}
	}

	/** 레코드 수정 **/
	// update employese set job=?, mgr=?, commission=0, deptno=20 where empno=?
	// 사원, 13, 1015
	// Connection, PreparedStatement, int result
	public void update() {
		PreparedStatement pstmt = null;
		String query = "update employese set job=?, mgr=?, commission=0, deptno=20 where empno=?";
		int result = 0; // Update 성공여부 확인
		String job = "사원";
		String mgr = "13";
		int empno = 1015;

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setString(1, job);
			pstmt.setString(2, mgr);
			pstmt.setInt(3, empno);

			result = pstmt.executeUpdate();
			if (result < 1) {
				System.out.println("UPDATE FAIL!!");
			}

		} catch (SQLException e) {
			System.out.println("UPDATE ERR : " + e.getMessage());
		} finally {
			try {
				pstmt.close();
			} catch (SQLException e) {
				System.out.println("UPDATE CLOSE ERR : " + e.getMessage());
			}
		}
	}

	/** 레코드 삭제 **/
	// delete from employee where empno=?
	// 1015
	// Connection, PreparedStatement, int result
	public void delete() {
		String query = "delete from employee where empno=?";

		PreparedStatement pstmt = null;
		int result = 0;
		int empno = 1015;

		try {
			pstmt = conn.prepareStatement(query);
			pstmt.setInt(1, empno);
			
			result = pstmt.executeUpdate(query);
			if(result <1) {
				System.out.println("DELETE FAIL!!");
			}
		} catch (SQLException e) {
			System.out.println("DELETE ERR : " + e.getMessage());
		}finally {
			try {
				pstmt.close();
			} catch (SQLException e) {
				System.out.println("DELETE CLOSE ERR : " + e.getMessage());
			}
		}
	}
}
