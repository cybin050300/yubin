package com.cyb.cafe;

import java.util.ArrayList;
import java.util.Comparator;

public class MethodClass {
	// CafeClass 객체에서 item만 추출하여 저장할 ArrayList
	static ArrayList<String> items = new ArrayList<String>();

	// 위의 items에서 중복 제거된 item 들만 저장할 ArrayList
	static ArrayList<String> no = new ArrayList<String>();

	// 위의 중복제거된 item과 count할 수 있도록 각각을 객체화 하여 저장할 ArrayList
	static ArrayList<ItemCountClass> item_count_list = new ArrayList<ItemCountClass>();

	public MethodClass() { // 기본 생성자
	}

	/** CafeClass 객체에서 item만 추출하여 저장 메서드 **/
	public static void item() {
		for (int n = 0; n < DataClass.cafe.size(); n++) {
			items.add(DataClass.cafe.get(n).getItem());

		} /*
			 * 또는 for (CafeClass cafe : DataClass.cafe) { items.add(cafe.getItem()); }
			 */

	} // item() END

	// items 내의 데이터 중복 제거 메서드
	// static ArrayList<String> no = new ArrayList<String>();
	public static void duplicate() {
		String tempString = ""; // 중복제거를 위한 임시 저장

		// 중복제거 전 데이터 정렬: ArrayList.sort()
		items.sort(Comparator.naturalOrder());

		for (int n = 0; n < items.size(); n++) {
			if (!tempString.equals(items.get(n))) {
				tempString = items.get(n);
				no.add(tempString);
			}
		}

	} // duplicate() END

	/** no 내의 item값들과 count 변수를 하나의 객체로 추가 메서드 **/
	// static ArrayList<ItemCountClass> item_count_list = new
	// ArrayList<ItemCountClass>();
	public static void item_count_list() {
		for (String item : no) {
			item_count_list.add(new ItemCountClass(item));
		}
	} // item_count_list() END

	/** ItemCountClass 객체들을 저장한 ArrayList와 전체 데이터를 비교하여 counting 하는 메서드**/
	// 이중 for문
	public static void counting() {
		for(ItemCountClass itemObj : item_count_list){
			for(int idx = 0; idx<DataClass.cafe.size();idx++) {
				if(itemObj.item.equals(DataClass.cafe.get(idx).getItem())) {
					itemObj.count ++; 
				
			}
				
			} // 전체 데이터 순회
		} // 중복 제거 데이터 순회
		
	} // counting()END
	
	/** count 값이 가장 큰 객체를 찾아서 반환**/
	public static ItemCountClass maxItem() {
		ItemCountClass tempObj = new ItemCountClass(); //임시저장
		
		for(ItemCountClass item : item_count_list) {
			if(tempObj.count < item.count) {
				tempObj.count = item.count;
				tempObj.item = item.item;
			}
		}
		
		return tempObj;
	}
	
	
	
} // MethodClass END
